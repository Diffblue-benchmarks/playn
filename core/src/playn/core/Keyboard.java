/**
 * Copyright 2010 The PlayN Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package playn.core;

import react.RFuture;
import react.Signal;
import react.Slot;

/**
 * Input-device interface for keyboard events. Three events are generated by keyboard input:
 * <ul>
 * <li> When any key is depressed, a {@link KeyEvent} is emitted indicating the logical key that
 * was depressed. </li>
 * <li> If the depressed key also corresponds to a printable character ('c' for example, but not
 * shift or alt), a {@link TypedEvent} is emitted to inform the app of the typed character. The
 * typed character will account for whether the shift key is depressed and will be appropriately
 * mapped to the uppercase equivalent or the appropriate alternate character (for example, # for 3,
 * in the US keyboard layout). The typed event is delivered immediately after the pressed event.
 * </li>
 * <li> When a key is released, a {@link KeyEvent} is emitted, indicating the logical key that was
 * released. </li>
 * </ul>
 */
public abstract class Keyboard {

  /** The base class for all keyboard events. */
  public static class Event extends playn.core.Event.Input {
    protected Event (int flags, double time) {
      super(flags, time);
    }
  }

  /** An event dispatched for key press/release. */
  public static class KeyEvent extends Event {
    /** The key that triggered this event, e.g. {@link Key#A}, etc. */
    public final Key key;
    /** Whether the key is down or up. */
    public final boolean down;

    public KeyEvent (int flags, double time, Key key, boolean down) {
      super(flags, time);
      this.key = key;
      this.down = down;
    }

    @Override protected String name() {
      return "Key";
    }
    @Override protected void addFields(StringBuilder builder) {
      super.addFields(builder);
      builder.append(", key=").append(key).append(", down=").append(down);
    }
  }

  /** An event dispatched when a printable character is typed. */
  public static class TypedEvent extends Event {
    /** The character typed to trigger this event, e.g. 'c'. */
    public char typedChar;

    public TypedEvent (int flags, double time, char typedChar) {
      super(flags, time);
      this.typedChar = typedChar;
    }

    @Override protected String name () {
      return "Typed";
    }
    @Override protected void addFields(StringBuilder builder) {
      super.addFields(builder);
      builder.append(", typedChar=").append(typedChar);
    }
  }

  /** A slot which only dispatches on {@link KeyEvent}s. */
  public static abstract class KeySlot extends Slot<Event> {
    public void onEmit (Event event) {
      if (event instanceof KeyEvent) onEmit((KeyEvent)event);
    }
    public abstract void onEmit (KeyEvent event);
  }

  /** A slot which only dispatches on {@link TypedEvent}s. */
  public static abstract class TypedSlot extends Slot<Event> {
    public void onEmit (Event event) {
      if (event instanceof TypedEvent) onEmit((TypedEvent)event);
    }
    public abstract void onEmit (TypedEvent event);
  }

  /** A signal via which keyboard events are emitted. */
  public Signal<Event> events = Signal.create();

  /**
   * Returns true if this device has a hardware keyboard, false if not. Devices that lack a
   * hardware keyboard will generally not generate keyboard events. Older android devices that
   * support four hardware buttons are an exception. Use {@link #getText} for text entry on a
   * non-hardware-keyboard having device.
   */
  public boolean hasHardwareKeyboard () {
    return false;
  }

  /** Enumerates the different available mobile keyboard types. See {@link #getText}. */
  public static enum TextType { DEFAULT, NUMBER, EMAIL, URL; }

  /**
   * Requests a line of text from the user. On platforms that have only a virtual keyboard, this
   * will display a text entry interface, obtain the line of text, and dismiss the text entry
   * interface when finished.
   *
   * @param textType the expected type of text. On mobile devices this hint may be used to display a
   * keyboard customized to the particular type of text.
   * @param label a label to display over the text entry interface, may be null.
   * @param initialValue the initial value to display in the text input field, may be null.
   * @return a future which provides the text when it becomes available. If the user cancels the
   * text entry process, null is supplied. Otherwise the entered text is supplied.
   */
  public abstract RFuture<String> getText (TextType textType, String label, String initialValue);
}
